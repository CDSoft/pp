% PP test file (markdown)
% Christophe Delord

Introduction
============

This document is a test file for `pp`.
It is preprocessed and compared with `pp-test.ref`.

The document also computes the test results.

Macros definition
=================

## Definition

----------------------------------- -----------------------------------------------------------------
Definition of `mac1`                
Show macro definition:              This is macro `mac1`
Show macro value:                   This is macro `mac1`
----------------------------------- -----------------------------------------------------------------

## Undefinition

----------------------------------- -----------------------------------------------------------------
Undefined macro `mac2`              
Show macro definition:              
Show macro value:                   !mac2
----------------------------------- -----------------------------------------------------------------

## Definition with arguments

----------------------------------- -----------------------------------------------------------------
Definition with arguments:          
Show macro definition:              !2 !1
Show macro value:                   !mac2 This is macro `mac1`
----------------------------------- -----------------------------------------------------------------

## Passing arguments between user macros (see issue #29)

----------------------------------- -----------------------------------------------------------------
A calls B calls C:                  C got 42
same with 3 args:                   C got 44 42 43
----------------------------------- -----------------------------------------------------------------

----------------------------------- -----------------------------------------------------------------
Undefinition:                       
----------------------------------- -----------------------------------------------------------------

----------------------------------- -----------------------------------------------------------------
Definition test:                    
Definition test:                    swap is defined
Definition test:                    mac1 is not defined
Definition test:                    swap is defined
Undefinition test:                  mac1 is not defined
Undefinition test:                  
Undefinition test:                  mac1 is not defined
Undefinition test:                  swap is defined
----------------------------------- -------------------------------------------------------------

## Testing argument scopes (see issue #33)



----------------------------------- -------------------------------------------------------------
Before calling f:                    
call with 2 args:                   f take 2 args: one and two but not !3
between two calls:                   
call with 1 arg:                    f take 2 args: one' and  but not !3
between two calls:                   
call with 2 args:                   f take 2 args: one'' and two'' but not !3
after calling f:                     
----------------------------------- -------------------------------------------------------------


----------------------------------- -------------------------------------------------------------
Before calling g:                    
call with 2 args:                   f take 2 args: one and two but not !3
between two calls:                   
call with 1 arg:                    f take 2 args: one' and  but not !3
between two calls:                   
call with 2 args:                   f take 2 args: one'' and two'' but not !3
after calling g:                     
----------------------------------- -------------------------------------------------------------


----------------------------------- -------------------------------------------------------------
Before calling g:                    
call with 2 args:                   f take 2 args: one and -two- but not !3
between two calls:                   
call with 1 arg:                    f take 2 args: one' and -- but not !3
between two calls:                   
call with 2 args:                   f take 2 args: one'' and -two''- but not !3
after calling g:                     
----------------------------------- -------------------------------------------------------------

## Equality / Inequality

  

----------------------------------- -----------------------------------------------------------------
Equality test:                      one == un
Equality test:                      
Equality test:                      one == un
Equality test:                      one /= two
Inequality test:                    
Inequality test:                    one /= two
Inequality test:                    one == un
Inequality test:                    one /= two
----------------------------------- -----------------------------------------------------------------

----------------------------------- -----------------------------------------------------------------
Raw text:                           !swap(a)(b)
Evaluated:                          b a
----------------------------------- -----------------------------------------------------------------

File inclusion
==============

## Before including `pp-test.i`

----------------------------------- -----------------------------------------------------------------
File name of the main file:         test/pp-test.md
File name of the current file:      test/pp-test.md
----------------------------------- -----------------------------------------------------------------

## Inclusion of `pp-test.i`

First line of the included file.

----------------------------------- -----------------------------------------------------------------
File name of the main file:         test/pp-test.md
File name of the included file:     test/pp-test.i
Definitions:                        answer = 42
----------------------------------- -----------------------------------------------------------------

Last line of the included file.


## After including `pp-test.i`

----------------------------------- -----------------------------------------------------------------
Definitions:                        42
----------------------------------- -----------------------------------------------------------------

## Files included without preprocessing

----------------------------------- -----------------------------------------------------------------
Undefinition:                       
----------------------------------- -----------------------------------------------------------------

First line of the included file.

----------------------------------- -----------------------------------------------------------------
File name of the main file:         !main
File name of the included file:     !file
Definitions:                        !def(answer)(42)answer = !answer
----------------------------------- -----------------------------------------------------------------

Last line of the included file.


----------------------------------- -----------------------------------------------------------------
No definitions:                     !answer
----------------------------------- -----------------------------------------------------------------

## Files imported

In the document:



Before importing: answer = !answer

After import: answer = 42

And from the command line:

imported_macro: The imported macro works!

Comments and quiet definitions
==============================

## Comments





## Quiet definitions



----------------------------------- -----------------------------------------------------------------
Definitions:                        3.14
----------------------------------- -----------------------------------------------------------------

File modification date
======================



----------------------------------- -----------------------------------------------------------------
Current file date:                  mdate = date of test/pp-test.md
Specific file date:                 Wednesday 23 June 2010
----------------------------------- -----------------------------------------------------------------

Environment variables
=====================

----------------------------------- -----------------------------------------------------------------
Undefined environment variable:     
Environment variable:               42
----------------------------------- -----------------------------------------------------------------

OS architecture
===============

----------------------------------- -----------------------------------------------------------------
OS:                                 linux
Architecture:                       x86_64
----------------------------------- -----------------------------------------------------------------

Simple arithmetic
=================

----------------------------------- -----------------------------------------------------------------
undefined + 1 =                     1
1 + 1 =                             2
undefined + 3 =                     3
3 + 4 =                             7
----------------------------------- -----------------------------------------------------------------

Dialect, Output language and output format
==========================================

## Dialect

----------------------------------- -----------------------------------------------------------------
The current dialect is md:          md
All dialects:                       md rst
Section for a markdown document:    Hello World!
Section for a rst document:         
----------------------------------- -----------------------------------------------------------------

## Language

----------------------------------- -----------------------------------------------------------------
The current language is "en":       en
All languages:                      en es fr it
Section in english:                 Hello World!
Section in french:                  
----------------------------------- -----------------------------------------------------------------

## Format

----------------------------------- -----------------------------------------------------------------
The current format is HTML:         html
All formats:                        epub html mobi odf pdf
Section for an HTML document:       Hello World!
Section for a PDF document:         
----------------------------------- -----------------------------------------------------------------

External commands and scripts execution
=======================================



----------------------------------- ------------------------------------------------------------------------------
Command line (uses sh):             exec(echo "hi é")
`sh` script:                        hi é
`bash` script:                      hi à
`bat` script:                       hi ç
`cmd` script:                       hi ç
`python` script:                    hi
`python2` script:                   hi
`python3` script:                   hi
`haskell` script:                   hi
`exec` script:                      !def(x)(42)!x
`rawexec` script:                   !def(x)(42)!x
Raw script output:                  !mymacro(42)
Preprocessed script output:         mymacro(42) has been evaluated!
----------------------------------- ------------------------------------------------------------------------------

A Haskell Stack script:

hi


A R script:

```

Call:
lm(formula = dist ~ speed, data = cars)

Residuals:
    Min      1Q  Median      3Q     Max 
-29.069  -9.525  -2.272   9.215  43.201 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) -17.5791     6.7584  -2.601   0.0123 *  
speed         3.9324     0.4155   9.464 1.49e-12 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 15.38 on 48 degrees of freedom
Multiple R-squared:  0.6511,	Adjusted R-squared:  0.6438 
F-statistic: 89.57 on 1 and 48 DF,  p-value: 1.49e-12


```

Diagrams
========

The diagram test does not check the generated images, just the links in the output document.

![Test of dot](img/dot-test.png)
![Test of neato](img/neato-test.png)
![Test of twopi](img/twopi-test.png)
![Test of circo](img/circo-test.png)
![Test of fdp](img/fdp-test.png)
![Test of patchwork](img/patchwork-test.png)
![Test of osage](img/osage-test.png)

![Test of uml](img/uml-test.png)

![Test of ditaa](img/ditaa-test.png)

![Test of Asymptote](img/asy-test.png)

![](img/size_small.png){.img width=50}

![Small with title](img/size_smallt.png){.img width=50}

![](img/size_normal.png){.img width=100}

![Normal with title](img/size_normalt.png){.img width=100}

![](img/size_big.png){.img width=150}

![Big with title](img/size_bigt.png){.img width=150}

![Test of R plot](img/rplot-test.png)

Literate programming
====================

Lets write and test a useful library:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.c}
// This is a C library
@functionDeclarations

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.c}
// This is a C library
@functionImplementations

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


The `fib` function computes Fibonacci's numbers:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.C}
int fib(int n);

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.C}
int fib(int n)
{
    return (n < 2) ? 1 : fib(n-1) + fib(n-2);
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


The `fact` function computes factorial numbers:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.C}
int fact(int n);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.C}
int fact(int n)
{
    return (n <= 1) ? 1 : n * fact(n-1);
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Some tests of `mylib.c`:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.C}
#include <stdio.h>
#include <stdlib.h>

#include "mylib.h"

int main(int argc, char * argv[])
{
    int i;
    for (i = 1; i < argc; i++)
    {
        int n = atoi(argv[i]);
        printf("fact(%d) = %3d; fib(%d) = %3d\n", n, fact(n), n, fib(n));
    }
    return 0;
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~







`mylibtest 0 1 2 3 4 5` outputs:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fact(0) =   1; fib(0) =   1
fact(1) =   1; fib(1) =   1
fact(2) =   2; fib(2) =   2
fact(3) =   6; fib(3) =   3
fact(4) =  24; fib(4) =   5
fact(5) = 120; fib(5) =   8
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The complete source files are:

`mylib.h`:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.c}
// This is a C library
@functionDeclarations

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


`mylib.c`:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.c}
// This is a C library
@functionImplementations

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


`mylibtest.c`:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.C}
#include <stdio.h>
#include <stdlib.h>

#include "mylib.h"

int main(int argc, char * argv[])
{
    int i;
    for (i = 1; i < argc; i++)
    {
        int n = atoi(argv[i]);
        printf("fact(%d) = %3d; fib(%d) = %3d\n", n, fact(n), n, fib(n));
    }
    return 0;
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


A source file, not necessarily generated with !lit can be
formated with !source or !src:

`mylib.h`:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.c}
// This is a C library
int fib(int n);
int fact(int n);

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


And with a different codeblock separator:

15 '~':

~~~~~~~~~~~~~~~ {.c}
// This is a C library
int fib(int n);
int fact(int n);

~~~~~~~~~~~~~~~


20 '`':

```````````````````` {.c}
// This is a C library
int fib(int n);
int fact(int n);

````````````````````


25 '~' (default character):

~~~~~~~~~~~~~~~~~~~~~~~~~ {.c}
// This is a C library
int fib(int n);
int fact(int n);

~~~~~~~~~~~~~~~~~~~~~~~~~


CSV tables
==========

This file with a header:

~~~~~~~~~~~~~~~~~~~~~~~~~
Year,Make,Model,Description,Price
1997,Ford,E350,"ac, abs, moon",3000.00
1999,Chevy,"Venture ""Extended Edition""","",4900.00
1999,Chevy,"Venture ""Extended Edition, Very Large""",,5000.00
1996,Jeep,Grand Cherokee,"MUST SELL!
air, moon roof, loaded",4799.00

~~~~~~~~~~~~~~~~~~~~~~~~~



is rendered by `!csv(file.csv)` as:

+------+-------+----------------------------------------+-----------------------------------+---------+
| Year | Make  | Model                                  | Description                       |   Price |
+=====:+:======+:=======================================+:==================================+========:+
| 1997 | Ford  | E350                                   | ac, abs, moon                     | 3000.00 |
+------+-------+----------------------------------------+-----------------------------------+---------+
| 1999 | Chevy | Venture "Extended Edition"             |                                   | 4900.00 |
+------+-------+----------------------------------------+-----------------------------------+---------+
| 1999 | Chevy | Venture "Extended Edition, Very Large" |                                   | 5000.00 |
+------+-------+----------------------------------------+-----------------------------------+---------+
| 1996 | Jeep  | Grand Cherokee                         | MUST SELL! air, moon roof, loaded | 4799.00 |
+------+-------+----------------------------------------+-----------------------------------+---------+


This file without any header:

~~~~~~~~~~~~~~~~~~~~~~~~~
1997,Ford,E350,"ac, abs, moon",3000.00
1999,Chevy,"Venture ""Extended Edition""","",4900.00
1999,Chevy,"Venture ""Extended Edition, Very Large""",,5000.00
1996,Jeep,Grand Cherokee,"MUST SELL!
air, moon roof, loaded",4799.00

~~~~~~~~~~~~~~~~~~~~~~~~~



is rendered by `!csv(file.csv)(Year|Make|Model|Description|Price)` as:

+------+-------+----------------------------------------+-----------------------------------+---------+
| Year | Make  | Model                                  | Description                       |   Price |
+=====:+:======+:=======================================+:==================================+========:+
| 1997 | Ford  | E350                                   | ac, abs, moon                     | 3000.00 |
+------+-------+----------------------------------------+-----------------------------------+---------+
| 1999 | Chevy | Venture "Extended Edition"             |                                   | 4900.00 |
+------+-------+----------------------------------------+-----------------------------------+---------+
| 1999 | Chevy | Venture "Extended Edition, Very Large" |                                   | 5000.00 |
+------+-------+----------------------------------------+-----------------------------------+---------+
| 1996 | Jeep  | Grand Cherokee                         | MUST SELL! air, moon roof, loaded | 4799.00 |
+------+-------+----------------------------------------+-----------------------------------+---------+


Parser customization
====================




## Macro calls

Test the default behaviour:

Inactive: `+` => +foo
Inactive: `=` => =foo
Inactive: `\` => \foo
Active  : `!` => foo has been called

Set new macro chars: `+=` 

Active  : `+` => foo has been called
Active  : `=` => foo has been called
Inactive: `\` => \foo
Inactive: `!` => !foo

Restore the default behaviour: `!` 

Inactive: `+` => +foo
Inactive: `=` => =foo
Inactive: `\` => \foo
Active  : `!` => foo has been called

## Macro args

Test the default behaviour:

Active  : `()` => bar:arg1="42" - text after macro call:
Active  : `{}` => bar:arg1="42" - text after macro call:
Active  : `[]` => bar:arg1="42" - text after macro call:
Inactive: `<>` => bar:arg1="" - text after macro call:<42>
Inactive: `«»` => bar:arg1="" - text after macro call:«42»

Set new parameter separators: `<>«»` 

Inactive: `()` => bar:arg1="" - text after macro call:(42)
Inactive: `{}` => bar:arg1="" - text after macro call:{42}
Inactive: `[]` => bar:arg1="" - text after macro call:[42]
Active  : `<>` => bar:arg1="42" - text after macro call:
Active  : `«»` => bar:arg1="42" - text after macro call:

Restore the default behaviour: `(){}[]` 

Active  : `()` => bar:arg1="42" - text after macro call:
Active  : `{}` => bar:arg1="42" - text after macro call:
Active  : `[]` => bar:arg1="42" - text after macro call:
Inactive: `<>` => bar:arg1="" - text after macro call:<42>
Inactive: `«»` => bar:arg1="" - text after macro call:«42»

## Literate macros

Set new literate macro chars: `$` 

~~~~~~~~~~~~~~~~~~~~~~~~~
$foo - $foo
~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~
I'm foo
~~~~~~~~~~~~~~~~~~~~~~~~~


Result: 

```
I'm foo - I'm foo
```

Restore the default behaviour: `@` 

Builtin macro documentation
===========================

## macros

define
def
undefine
undef
rawdef
ifdef
ifndef
ifeq
ifne
import
include
inc
raw
rawinclude
rawinc
comment
quiet
pp
mdate
main
file
lang
langs
en
fr
it
es
format
formats
html
pdf
odf
epub
mobi
dialect
dialects
md
rst
env
os
arch
add
exec
rawexec
sh
bash
cmd
bat
python
python2
python3
haskell
stack
Rscript
powershell
dot
neato
twopi
circo
fdp
sfdp
patchwork
osage
uml
ditaa
asy
Rplot
literate
lit
flushliterate
flushlit
source
src
codeblock
indent
csv
macrochars
macroargs
literatemacrochars
macros
usermacros
help
userhelp


## help

**`define`**, **`def`**
:   `!def[ine](SYMBOL)[[(DOC)](VALUE)]` adds the symbol `SYMBOL` to
    the current environment and associate it with the optional value
    `VALUE`. Arguments are denoted by `!1` ... `!n` in `VALUE`. If
    `DOC` is given it is used to document the macro (see the `-help`
    option).

**`undefine`**, **`undef`**
:   `!undef[ine](SYMBOL)` removes the symbol `SYMBOL` from the current
    environment.

**`rawdef`**
:   `!rawdef(X)` returns the raw (unevaluated) definition of `X`.

**`ifdef`**
:   `!ifdef(SYMBOL)(TEXT_IF_DEFINED)[(TEXT_IF_NOT_DEFINED)]` returns
    `TEXT_IF_DEFINED` if `SYMBOL` is defined or `TEXT_IF_NOT_DEFINED`
    if it is not defined.

**`ifndef`**
:   `!ifndef(SYMBOL)(TEXT_IF_NOT_DEFINED)[(TEXT_IF_DEFINED)]` returns
    `TEXT_IF_NOT_DEFINED` if `SYMBOL` is not defined or `TEXT_IF_DEFINED`
    if it is defined.

**`ifeq`**
:   `!ifeq(X)(Y)(TEXT_IF_EQUAL)[(TEXT_IF_DIFFERENT)]` returns `TEXT_IF_EQUAL`
    if `X` and `Y` are equal or `TEXT_IF_DIFFERENT` if `X` and `Y`are
    different. Two pieces of text are equal if all non-space characters
    are the same.

**`ifne`**
:   `!ifne(X)(Y)(TEXT_IF_DIFFERENT)[(TEXT_IF_EQUAL)]` returns `TEXT_IF_DIFFERENT`
    if `X` and `Y` are different or `TEXT_IF_EQUAL` if `X` and `Y`are
    equal.

**`import`**
:   `!import(FILENAME)` works as `!include(FILENAME)` but returns
    nothing. This is useful to import macro definitions.

**`include`**, **`inc`**
:   `!inc[lude](FILENAME)` preprocesses and returns the content of
    the file named `FILENAME` and includes it in the current document.
    If the file path is relative it is searched first in the directory
    of the current file then in the directory of the main file.

**`raw`**
:   `!raw(TEXT)` returns `TEXT` without any preprocessing.

**`rawinclude`**, **`rawinc`**
:   `!rawinc[lude](FILE)` returns the content of `FILE` without any
    preprocessing.

**`comment`**
:   `!comment(TEXT)` considers `TEXT` as well as any additional parameters
    as comment. Nothing is preprocessed or returned.

**`quiet`**
:   `!quiet(TEXT)` quietly preprocesses `TEXT` and returns nothing.
    Only the side effects (e.g. macro definitions) are kept in the
    environment.

**`pp`**
:   `!pp(TEXT)` preprocesses and return `TEXT`. This macro is useful
    to preprocess the output of script macros for instance (`!sh`,
    `!python`, ...).

**`mdate`**
:   `!mdate(FILES)` returns the modification date of the most recent
    file.

**`main`**
:   `!main` returns the name of the main file (given on the command
    line).

**`file`**
:   `!file` returns the name of the current file.

**`lang`**
:   `!lang` returns the current language.

**`langs`**
:   `!langs` lists the known languages (en, fr, it, es).

**`en`**
:   `!en(TEXT)` returns `TEXT` if the current language is `en`.

**`fr`**
:   `!fr(TEXT)` returns `TEXT` if the current language is `fr`.

**`it`**
:   `!it(TEXT)` returns `TEXT` if the current language is `it`.

**`es`**
:   `!es(TEXT)` returns `TEXT` if the current language is `es`.

**`format`**
:   `!format` returns the current output format.

**`formats`**
:   `!formats` lists the known formats (html, pdf, odf, epub, mobi).

**`html`**
:   `!html(TEXT)` returns `TEXT` if the current format is `html`.

**`pdf`**
:   `!pdf(TEXT)` returns `TEXT` if the current format is `pdf`.

**`odf`**
:   `!odf(TEXT)` returns `TEXT` if the current format is `odf`.

**`epub`**
:   `!epub(TEXT)` returns `TEXT` if the current format is `epub`.

**`mobi`**
:   `!mobi(TEXT)` returns `TEXT` if the current format is `mobi`.

**`dialect`**
:   `!dialect` returns the current output dialect.

**`dialects`**
:   `!dialects` lists the kown output dialects (md, rst).

**`md`**
:   `!md(TEXT)` returns `TEXT` if the current dialect is `md`.

**`rst`**
:   `!rst(TEXT)` returns `TEXT` if the current dialect is `rst`.

**`env`**
:   `!env(VARNAME)` preprocesses and returns the value of the process
    environment variable `VARNAME`.

**`os`**
:   `!os` returns the OS name (e.g. `linux` on Linux, `darwin` on
    MacOS, `windows` on Windows).

**`arch`**
:   `!arch` returns the machine architecture (e.g. `x86_64`, `i386`,
    ...).

**`add`**
:   `!add(VARNAME)[(INCREMENT)]` computes `VARNAME+INCREMENT` and
    stores the result to `VARNAME`. The default value of the increment
    is 1.

**`exec`**
:   `!exec(COMMAND)` executes a shell command with the default shell
    (`sh` or `cmd` according to the OS).

**`rawexec`**
:   `!rawexec` is *deprecated*. See exec.

**`sh`**
:   `!sh(CMD)` executes `CMD` in a `sh` shell.

**`bash`**
:   `!bash(CMD)` executes `CMD` in a `bash` shell.

**`cmd`**
:   `!cmd(CMD)` executes `CMD` in a Windows shell (cmd.exe).

**`bat`**
:   `!bat` is *deprecated*. See cmd.

**`python`**
:   `!python(CMD)` executes `CMD` with the default Python interpretor.

**`python2`**
:   `!python2(CMD)` executes `CMD` with Python 2.

**`python3`**
:   `!python3(CMD)` executes `CMD` with Python 3.

**`haskell`**
:   `!python3(CMD)` executes `CMD` as a Haskell script with `runhaskell`.

**`stack`**
:   `!python3(CMD)` executes `CMD` as a Haskell script with `stack`.

**`Rscript`**
:   `!Rscript(CMD)` executes `CMD` as a R script with Rscript.

**`powershell`**
:   `!cmd(CMD)` executes `CMD` in a Windows shell (Powershell).

**`dot`**
:   `!dot(IMAGE)(LEGEND)(GRAPH DESCRIPTION)` renders a dot image with
    Graphviz.

**`neato`**
:   `!neato(IMAGE)(LEGEND)(GRAPH DESCRIPTION)` renders a neato image
    with Graphviz.

**`twopi`**
:   `!twopi(IMAGE)(LEGEND)(GRAPH DESCRIPTION)` renders a twopi image
    with Graphviz.

**`circo`**
:   `!circo(IMAGE)(LEGEND)(GRAPH DESCRIPTION)` renders a circo image
    with Graphviz.

**`fdp`**
:   `!fdp(IMAGE)(LEGEND)(GRAPH DESCRIPTION)` renders a fdp image with
    Graphviz.

**`sfdp`**
:   `!sfdp(IMAGE)(LEGEND)(GRAPH DESCRIPTION)` renders a sfdp image
    with Graphviz.

**`patchwork`**
:   `!patchwork(IMAGE)(LEGEND)(GRAPH DESCRIPTION)` renders a patchwork
    image with Graphviz.

**`osage`**
:   `!osage(IMAGE)(LEGEND)(GRAPH DESCRIPTION)` renders a osage image
    with Graphviz.

**`uml`**
:   `!uml(IMAGE)(LEGEND)(GRAPH DESCRIPTION)` renders a uml image with
    PlantUML.

**`ditaa`**
:   `!ditaa(IMAGE)(LEGEND)(GRAPH DESCRIPTION)` renders a ditaa image
    with PlantUML.

**`asy`**
:   `!asy(IMAGE)(LEGEND)(GRAPH DESCRIPTION)` renders a asy image with
    Asymptote.

**`Rplot`**
:   `!Rplot(IMAGE)(LEGEND)(GRAPH DESCRIPTION)` renders a Rplot image
    with R.

**`literate`**, **`lit`**
:   `!lit[erate](FILENAME)[(LANG)][(CONTENT)]` appends `CONTENT` to
    the file `FILENAME`. If `FILENAME` starts with `@` it's a macro,
    not a file. The output is highlighted using the programming language
    `LANGUAGE`. The list of possible languages is given by `pandoc --list-highlight-languages`.
    Files are actually written when all the documents have been successfully
    preprocessed. Macros are expanded when the files are written.
    This macro provides basic literate programming features. If `LANG`
    is not given, pp uses the previously defined language for the
    same file or macro or a default language according to its name.
    If `CONTENT`is not given, pp returns the current content of `FILENAME`.

**`flushliterate`**, **`flushlit`**
:   `!flushlit[erate]` writes files built with `!lit` before reaching
    the end of the document. This macro is automatically executed
    before any script execution or file inclusion with `!src`.

**`source`**, **`src`**
:   `!source(FILENAME)[(LANG)]` or `!src(FILENAME)[(LANG)]` formats
    an existing source file in a colorized code block.

**`codeblock`**
:   `!codeblock(LENGTH)[(CHAR)]` sets the default line separator for
    code blocks. The default value is a 70 tilda row (`!codeclock(70)(~)`).

**`indent`**
:   `!indent[(N)](BLOCK)` indents each line of a block with `N` spaces.
    The default value of `N` is 4 spaces.

**`csv`**
:   `!csv(FILENAME)[(HEADER)]` converts a CSV file to a Markdown or
    reStructuredText table. `HEADER` defines the header of the table,
    fields are separated by pipes (`|`). If `HEADER` is not defined,
    the first line of the file is used as the header of the table.

**`macrochars`**
:   `!macrochars(CHARS)` defines the chars used to call a macro. The
    default value is `"!"`. Any non space character can start a macro
    call (e.g. after `!macrochars(!\)` both `!foo` and `\foo` are
    valid macro calls.

**`macroargs`**
:   `!macroargs(CHARS)` defines the chars used to separate macro arguments.
    The default value is `"(){}[]"` (e.g. after `!macroargs(()«»)`
    both `!foo(...)` and `!foo«...»` are valid macro calls).

**`literatemacrochars`**
:   `!literatemacrochars(CHARS)` defines the chars used to identify
    literate programming macros. The default value is `"@"`. Any non
    space character can start a literate programming macro (e.g. after
    `!literatemacrochars(@&)` both `@foo` and `&foo` are valid macro
    calls.

**`macros`**
:   `!macros` lists the builtin macros.

**`usermacros`**
:   `!usermacros` lists the user macros.

**`help`**
:   `!help` prints built-in macro help.

**`userhelp`**
:   `!userhelp` prints user macro help.



User macro documentation
========================





imported_macro
swap
A
B
C
f
g
one
un
two
answer
pi
x
y
mymacro
test
result
foo
useless
bar


**`bar`**
:   bar's docstring

**`foo`**
:   foo's docstring


